#!/bin/bash

set -e

if grep -q Raspbian /etc/os-release 2>/dev/null; then
  DOTFILES_LITE=1
fi

if [[ $(hostname) == *"MacBook-Pro-16-2021"* ]]; then
  export FIRSTVET=1
fi
if [ -f "/Library/Apple/System/Library/Receipts/com.apple.pkg.RosettaUpdateAuto.bom" ]; then
  export ROSETTA_INSTALLED=1
fi

if [ -x "$(command -v lsb_release)" ] && [[ $(lsb_release -si) == 'Ubuntu' ]]; then
  OS_UBUNTU=1
  if dpkg -l ubuntu-desktop >/dev/null; then
    UBUNTU_DESKTOP=1
  fi
fi

if grep -q 'microsoft.*WSL' /proc/version; then OS_WSL=1; fi

export PROCESSOR_ARCHITECTURE=${PROCESSOR_ARCHITECTURE:-$(uname -p)}

###############################################################################
# Linux (and Windows Subsystem for Linux)                                     #
###############################################################################
if [[ $(uname) == 'Linux' ]]; then
  if ! [ -x "$(command -v add-apt-repository)" ]; then
    sudo apt install -y software-properties-common
  fi
  if vi --version | grep -q "Small version"; then
    sudo apt install -y --reinstall vim
  fi
  set +e
  # add repo to get newest git
  sudo add-apt-repository -y ppa:git-core/ppa
  # add repo to get newest tmux
  sudo add-apt-repository -y ppa:pi-rho/dev
  # add repo to get gh
  sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
  sudo apt-add-repository -y https://cli.github.com/packages
  sudo apt update
  sudo apt full-upgrade -y
  # eventually remove the removals
  sudo apt remove -y fasd
  # tmux-next, ripgrep and bat are absent from raspbian
  apps="
    zsh
    git
    git-crypt
    yadm
    vim
    tmux
    tmux-next
    highlight
    trash-cli
    zoxide
    ripgrep
    bat
    fd-find
    gh
    keychain
    tree
    tig
    aptitude
    lnav
    tmpreaper
    libssl-dev
    pkg-config
  "
  for app in $apps; do
    if ! dpkg-query -l "$app" >/dev/null; then
      sudo apt install -y "$app"
    fi
  done
  # for some reason, keychain cannot be installed using the list
  sudo apt install -y keychain

  if [ -z "$DOTFILES_LITE" ]; then
    sudo apt install -y \
      direnv \
      build-essential \
      python-pip \
      python3-pip \
      cargo \
      fortune-mod

    sudo -H pip install --upgrade pip
    sudo -H pip3 install --upgrade pip
    sudo -H pip install virtualenv virtualenvwrapper
    sudo -H pip3 install thefuck
  fi

  # install gh
  type -p curl >/dev/null || sudo apt install curl -y
  curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg &&
    sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg &&
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list >/dev/null &&
    sudo apt update
  sudo apt install gh -y

  set -e

  installLsd() {
    SYSTEM_DEB_SUFFIX=$1
    TEMP_DEB="$(mktemp)" &&
      curl -sL github.com/Peltoche/lsd/releases/latest |
      grep "lsd_[[:digit:]]\.[[:digit:]]*\.[[:digit:]]*_$SYSTEM_DEB_SUFFIX.deb\"" |
        head -1 |
        awk -F "\"" '{print "https://github.com" $2}' |
        wget --show-progress -O "$TEMP_DEB" -qNi - &&
      sudo dpkg --skip-same-version -i "$TEMP_DEB"
    rm -f "$TEMP_DEB"
  }

  if [[ $(dpkg --print-architecture) == "arm64" ]]; then
    # Ubuntu desktop on Raspberry pi 400 will have arm64
    installLsd "$(dpkg --print-architecture)"
  elif [[ $(dpkg --print-architecture) == "amd64" ]]; then
    # WSL will have amd64
    if gh auth status; then
      LATEST_TAG=$(gh release list --exclude-drafts -R Peltoche/lsd -L 1 | awk '{print $1;}')
      gh release download "$LATEST_TAG" -R Peltoche/lsd -p "lsd_${LATEST_TAG}_amd64.deb" --skip-existing -D "/tmp"
      sudo dpkg --skip-same-version -i "/tmp/lsd_${LATEST_TAG}_amd64.deb"
    fi

  elif [ -x "$(command -v gh)" ] && [[ $(dpkg --print-architecture) == "armhf" ]]; then
    # probably 32 bit Rapberry Pi OS
    mkdir -p "$HOME/.manually-installed/lsd/"
    LATEST_TAG=$(gh release list --exclude-drafts -R Peltoche/lsd -L 1 | awk '{print $1;}')
    gh release download "$LATEST_TAG" -R Peltoche/lsd -p "lsd-$LATEST_TAG-arm-unknown-linux-gnueabihf.tar.gz" --skip-existing -D "/tmp"
    tar -xzvf "/tmp/lsd-$LATEST_TAG-arm-unknown-linux-gnueabihf.tar.gz" --keep-newer-files --strip-components=1 -C "$HOME/.manually-installed/lsd/"

    #else
    # alternate pi hole ends up here
    #installLsd "$(dpkg --print-architecture)"
  fi

  if [ -n "$OS_WSL" ]; then
    #################################################################################
    # configuration specific for WSL
    #################################################################################
    # unfortunately trash-empty 0.12 does not clean NTFS mounted file systems
    if [ -f ~/bin/trash-empty-wsl ]; then
      ~/bin/trash-empty-wsl +30
    fi
  else
    #################################################################################
    # configuration specific non-WSL, e.g. raspberry pi, and those that support snap
    #################################################################################

    # the following was an attempt to use snap on Raspberry pi. Installed, but no command line tool except hello-world worked
    if ! [ -x "$(command -v snap)" ]; then
      sudo apt install -y snapd
      sudo reboot
    fi
    sudo snap install core
    sudo snap refresh
    sudo snap install croc
    if [ -n "$OS_UBUNTU" ]; then
      sudo snap install http --channel latest/candidate
      if [ -n "$UBUNTU_DESKTOP" ]; then
        # dark mode
        gsettings set org.gnome.desktop.interface gtk-theme 'Adwaita-dark'
        # no background picture (default was 'zoom')
        gsettings set org.gnome.desktop.background picture-options 'none'
        # black Background (default was '#023c88')
        gsettings set org.gnome.desktop.background primary-color '#000000'

        # auto hide dock
        gsettings set org.gnome.shell.extensions.dash-to-dock dock-fixed false
        gsettings set org.gnome.shell.extensions.dash-to-dock autohide true
        gsettings set org.gnome.shell.extensions.dash-to-dock intellihide-mode 'ALL_WINDOWS'

        sudo apt install -y curl

        # ssh
        sudo apt install -y ssh
        sudo systemctl enable --now ssh

        # install vscode
        wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor >/tmp/packages.microsoft.gpg
        sudo install -o root -g root -m 644 /tmp/packages.microsoft.gpg /etc/apt/trusted.gpg.d/
        sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
        sudo apt install -y apt-transport-https
        sudo apt install -y code fonts-cascadia-code xclip

        # install Chromium
        sudo snap install chromium --channel latest/beta
      fi
      if [ -x "$(command -v cargo)" ]; then
        cargo install hyperfine
        cargo install exa
      fi
    fi
  fi

  sudo apt autoremove --yes

  # overwrite old tmux
  if [ -f /usr/bin/tmux-next ]; then
    sudo ln -sf /usr/bin/tmux-next /usr/bin/tmux
  fi

  if ! [ -x "$(command -v git-lfs)" ]; then
    curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
  fi
  sudo apt install git-lfs || true
  if [ -x "$(command -v git-lfs)" ]; then
    git lfs install --skip-smudge
  fi

  # do some cleanup
  trash-empty 30
  sudo tmpreaper --all --showdeleted 30d /tmp

  # remove cron warning
  sudo sed -i~ 's/^SHOWWARNING=true$/# SHOWWARNING=true/' /etc/tmpreaper.conf

  # remove the boring and verbose standard motd
  if [ -f /etc/motd ] && ! [ -f /etc/motd\~ ]; then
    pushd /etc
    sudo mv motd motd\~
    sudo touch motd
    popd
  fi

  if ! grep -q "$USR:.*zsh" /etc/passwd; then
    sudo chsh -s "$(which zsh)" "$(whoami)"
  fi

  # install fuzzy matcher (^R, Alt-C, ^T, **)
  if [ -x "$(command -v fzf)" ]; then
    pushd ~/.fzf
    git pull
    ./install --bin
    popd
  else
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    ~/.fzf/install --completion --key-bindings --no-update-rc
  fi

  if [ -z "$DOTFILES_LITE" ]; then
    # haskell
    if ! [ -x "$(command -v stack)" ]; then
      wget -qO- https://get.haskellstack.org/ | sh || true
    fi
  fi

  # when it is needed, this updates the OS, so it will take a LONG time
  if [ -x "$(command -v do-release-upgrade)" ]; then
    # upgrade to the development release
    sudo do-release-upgrade -d || true
  fi

  # no more Linux related things to do
  exit 0
fi
###############################################################################
# macOS
###############################################################################
if [ -d "/opt/homebrew/bin" ]; then
  export HOMEBREW_PREFIX=/opt/homebrew
else
  export HOMEBREW_PREFIX=/usr/local
  # the /opt/homebrew path is hard coded n gpg-agent.conf
  sudo mkdir -p /opt/homebrew/bin
  sudo ln -fs $HOMEBREW_PREFIX/bin/pinentry-mac /opt/homebrew/bin/pinentry-mac
fi
export HW_MODEL=${HW_MODEL:-$(sysctl -n hw.model)}

# uninstall mac apps, remove when run on all macs
# (1.3.5)  "Mic Drop."
#sudo mas uninstall 1489816366
#sudo rm -rf /Applications/Mic\ Drop.app

# overriding original path /usr/bin:/bin:/usr/sbin:/sbin with ${PATH_OVERRIDE} so that gpg and node will be on path for spotlight launched programs"
# not working on Big Sur?
PATH_OVERRIDE=$(getconf PATH):${HOME}/bin:$HOMEBREW_PREFIX/bin
sudo launchctl config user path "$PATH_OVERRIDE"

# if xcode has just been manually installed
sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
sudo git-lfs install --system || true

export WORKING_FROM_HOME=1
if [ -n "$WORKING_FROM_HOME" ]; then
  # enable startup sound
  if [[ $PROCESSOR_ARCHITECTURE == 'arm' ]]; then
    sudo nvram StartupMute=%00
  else
    sudo nvram -d SystemAudioVolume
  fi
else
  if [[ ${HW_MODEL} == MacBook* ]]; then
    # stop startup sound
    if [[ $PROCESSOR_ARCHITECTURE == 'arm' ]]; then
      sudo nvram StartupMute=%01
    else
      sudo nvram SystemAudioVolume=%80
    fi
  fi
fi

sudo xcodebuild -license accept

# FirstVet might need this
#sudo ln -s $(which python3) /usr/local/bin/python

# speed up time machine backups until next reboot
sudo sysctl debug.lowpri_throttle_enabled=0

# set up cleanup of Downloads and Pictures
cat <<EOF >/etc/periodic.conf
daily_clean_tmps_dirs="/tmp $HOME/Downloads $HOME/Pictures $HOME/Desktop"
daily_clean_tmps_ignore=".X*-lock .X11-unix .ICE-unix .font-unix .XIM-unix *.photoslibrary *Library"
#daily_clean_tmps_days="14"
EOF

###############################################################################
# bash4
###############################################################################
if ! grep -q "$HOMEBREW_PREFIX/bin/bash" "/etc/shells"; then
  sudo sh -c "echo $HOMEBREW_PREFIX/bin/bash >> /etc/shells"
fi
# chsh -s $HOMEBREW_PREFIX/bin/bash $(whoami)

###############################################################################
# zsh
###############################################################################
if ! grep -q "$HOMEBREW_PREFIX/bin/zsh" "/etc/shells"; then
  sudo sh -c "echo $HOMEBREW_PREFIX/bin/zsh >> /etc/shells"
fi
sudo chsh -s $HOMEBREW_PREFIX/bin/zsh "$(whoami)"

sudo defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText "This Mac belongs to Klas Mellbourn.\ne-mail: klas@mellbourn.net phone: +46 708 80 00 00\nReward offered for return of this Mac. No questions asked."

# supress "Disk Not Ejected Properly" for backup disk, since it does sleep  https://apple.stackexchange.com/a/12701/12219
sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.DiskArbitration.diskarbitrationd.plist DADisableEjectNotification -bool YES
###############################################################################
# Update App Store apps
###############################################################################
# enable automatically "Install app updates" from the Mac App Store
sudo defaults write /Library/Preferences/com.apple.commerce AutoUpdate -bool TRUE
# enable automatically "install macOS updates"
sudo defaults write /Library/Preferences/com.apple.SoftwareUpdate AutomaticallyInstallMacOSUpdates -bool true

# this will not install major updates, e.g. Catalina
sudo softwareupdate --schedule on
sudo softwareupdate -i -a --restart
if [[ -n "$FIRSTVET" ]]; then
  # needed for python2 which is needed for node-gyp and node-sass
  if [[ -z "$ROSETTA_INSTALLED" ]]; then
    yes A | softwareupdate --install-rosetta
  fi
  xcodes update
  XCODE_VERSION=13.4.1
  if ! xcodes installed | grep -q "$XCODE_VERSION"; then
    xcodes install "$XCODE_VERSION"
  fi
fi

# always boot in verbose mode (not MacOS GUI mode) - no longer seems to work on Big Sur
if [[ $PROCESSOR_ARCHITECTURE != 'arm' ]]; then
  sudo nvram boot-args="-v"
fi

# Enable firewall. Possible values:
#   0 = off
#   1 = on for specific sevices
#   2 = on for essential services
sudo defaults write /Library/Preferences/com.apple.alf globalstate -int 1

# disable Gatekeeper, i.e. allow unsigned apps. Seems to be default at current customer
#sudo spctl --master-disable

# disable guest user
sudo sysadminctl -guestAccount off

# protect KeeWeb
sudo chown -R root /Applications/KeeWeb.app

# run customer specific bootstrap
. "${XDG_CONFIG_HOME:-$HOME/.config}"/yadm/bootstrap-sudo-customer
