#!/bin/bash
###############################################################################
# Klas Mellbourn's dotfile
#
# https://github.com/Mellbourn/dotfiles
# https://dotfiles.github.io/
#
# Many settings inspired by
# https://github.com/mathiasbynens/dotfiles/blob/master/.macos
#
# Nice links here
# https://medium.com/@webprolific/getting-started-with-dotfiles-43c3602fd789#.2d3cfjv7d
###############################################################################
set -e

version_gte() {
  printf '%s\n%s' "$1" "$2" | sort -C -V -r
}

if grep -q Raspbian /etc/os-release 2>/dev/null; then
  OS_RASPBIAN=1
  DOTFILES_LITE=1
fi
export PROCESSOR_ARCHITECTURE=${PROCESSOR_ARCHITECTURE:-$(uname -p)}
if [[ $(hostname) == "FXF"* ]]; then
  export KLA=1
fi
#echo "add work project here"
#if [[ $(hostname) == *"Klass-MacBook-Pro-16"* ]]; then
#export PROJ_ANTICIMEX=1
#export PROJ_DMAZE=1
#export FIRSTVET=1
#fi
if [ -f "/Library/Apple/System/Library/Receipts/com.apple.pkg.RosettaUpdateAuto.bom" ]; then
  export ROSETTA_INSTALLED=1
fi
if [[ $PROCESSOR_ARCHITECTURE != 'arm' || -n "$ROSETTA_INSTALLED" ]]; then
  export X86_OR_ROSETTA=1
fi

if [ -x "$(command -v lsb_release)" ] && [[ $(lsb_release -si) == 'Ubuntu' ]]; then
  OS_UBUNTU=1
  if dpkg -l ubuntu-desktop >/dev/null; then
    UBUNTU_DESKTOP=1
  fi
fi

SCRIPT_DIR=$(dirname "$0")

if ! [ -f ~/.ssh/id_ed25519 ]; then
  ssh-keygen -t ed25519 -b 4096 -C "${USER}@$(hostname)" -f ~/.ssh/id_ed25519
  eval "$(ssh-agent -s)"
  if [[ $(uname) == 'Darwin' ]]; then
    ssh-add --apple-use-keychain ~/.ssh/id_ed25519
  else
    ssh-add
  fi
  echo "Remember to add the new public key in ~/.ssh/id_ed25519.pub to github and appropriate authorized_hosts."
fi

pushd ~
yadm submodule update --init --recursive --remote
popd

# Install `zinit` if not installed
if [ ! -d ~/.zinit ]; then
  mkdir ~/.zinit
  chmod go-w ~/.zinit # to avoid insecure directories complaint
  git clone https://github.com/zdharma-continuum/zinit.git ~/.zinit/bin
fi

if [[ -z "$KLA" ]]; then
  # install asdf version manager https://asdf-vm.com/
  if [[ $(uname) == 'Darwin' ]]; then
    brew install asdf || true
  else
    # TODO: "asdf update" has stopped working, must switch to apt get soon, but not yet present for raspbian
    if [ ! -d ~/.asdf ]; then
      git clone https://github.com/asdf-vm/asdf.git ~/.asdf
      source ~/.asdf/asdf.sh
    fi
    asdf update || true
  fi
  asdf plugin update --all

  set +e
  # remove these removals eventually
  #asdf uninstall java zulu-8.58.0.13
  asdf plugin remove direnv

  asdf plugin add lazydocker https://github.com/comdotlinux/asdf-lazydocker.git
  set -e

  asdf plugin add nodejs
  asdf plugin add java

  asdf plugin add ruby
  asdf plugin add python
  asdf plugin add bundler

  set +e
  asdf install nodejs latest
  asdf install python latest
  if [ -z "$OS_RASPBIAN" ] && [ -z "$OS_UBUNTU" ]; then
    asdf install ruby latest
    if [ -x "$(command -v asdf)" ] && version_gte "$(asdf --version | sed 's/.* //' | sed 's/v//' | sed 's/\-.*//')" 0.16; then
      asdf set -u ruby latest
    else
      asdf global ruby latest
    fi
  fi

  # if no versions are installed, the asdf plugin will fall back to "system"
  asdf install lazydocker latest
  set -e

  if [ -x "$(command -v asdf)" ] && version_gte "$(asdf --version | sed 's/.* //' | sed 's/v//' | sed 's/\-.*//')" 0.16; then
    asdf set -u nodejs latest
    asdf set -u python latest
    asdf set -u lazydocker latest
  else
    asdf global nodejs latest
    asdf global python latest
    asdf global lazydocker latest
  fi

  ## clean up old versions of asdf plugins, unless we specifically want to keep them
  # e.g. asdf-clean -v -i nodejs 20.9.0 2.32.1 # this would also install if necessary
  # python 3.11.8 needed for tensorflow: python -m pip install --upgrade https://files.pythonhosted.org/packages/85/15/cf99a373812d37f8ae99752a34a9f5f690d820ceb5b302e922705bc18944/tensorflow-2.15.0-cp311-cp311-macosx_12_0_arm64.whl
  asdf-clean -v -i python 3.11.8
fi

if [[ $(uname) == 'Darwin' ]]; then
  ###############################################################################
  # macOS specific installations
  ###############################################################################
  OS_MAJOR_VERSION=$(sw_vers -productVersion | cut -d. -f1)
  BIG_SUR_MAJOR_VERSION=11

  # activate cleanup jobs, doesn't actually update?
  launchctl unload ~/Library/LaunchAgents/local.cleanup.downloads.plist
  launchctl load -w ~/Library/LaunchAgents/local.cleanup.downloads.plist
  launchctl unload ~/Library/LaunchAgents/local.cleanup.pictures.plist
  launchctl load -w ~/Library/LaunchAgents/local.cleanup.pictures.plist
  launchctl unload ~/Library/LaunchAgents/local.cleanup.resurrect.plist
  launchctl load -w ~/Library/LaunchAgents/local.cleanup.resurrect.plist
  launchctl unload ~/Library/LaunchAgents/local.cleanup.trash.plist
  launchctl load -w ~/Library/LaunchAgents/local.cleanup.trash.plist
  # they don't work, so run them anyway
  "$HOME"/.local/bin/cleanup-directory -d "$HOME"/Downloads -l 10 -v
  "$HOME"/.local/bin/cleanup-directory -d "$HOME"/Pictures -l 10 -v
  # not needed: tmux-resurrect deletes files older than 30 days by default
  #$HOME/.local/bin/cleanup-directory -d $HOME/.tmux/resurrect -f \*/tmux_resurrect_\*.txt -l 5 -v
  # not needed - I have enough space
  # "$HOMEBREW_PREFIX"/sbin/tmpreaper -vv 2d -T 180 "$HOME"/.Trash &

  ###############################################################################
  # App store                                                                   #
  ###############################################################################
  if false; then
    # mas no longer working well
    brew install mas || true

    # no longer compatible
    mas install 1352778147 # Bitwarden
    mas lucky "Copy 'Em"   # (3.0.6) 876540291
    if [[ -z "$KLA" ]]; then
      mas install 497799835                  # Xcode
      mas lucky "John's Background Switcher" # 907640277
      mas lucky "Popcorn for Safari"         # (2.0) 1535719670
    fi
    mas lucky "Yubico Authenticator" # (6.1.0) 1497506650
    # Safari extensions
    mas lucky "Adblock Plus for Safari ABP" # (2.1.10) 1432731683
    # DuckTabs removed from store?
    #mas lucky "DuckTabs Extension"            # (2.0) 1508584686
    mas lucky "Dark Reader for Safari"        # (1.4.3) 1438243180
    mas lucky "Grammarly: AI Writing Support" # (9.33) 1462114288

    if [[ -n $X86_OR_ROSETTA ]]; then
      # these still require rosetta afaik
      mas lucky Bredbandskollen # 1147976909
      if [[ -z "$KLA" ]]; then
        # Microsoft Remote Desktop 10 1295203466
        mas lucky "Windows App" # was "Microsoft Remote Desktop"
      fi
    fi

    # upgrade all
    if [ "$OS_MAJOR_VERSION" -ge "$BIG_SUR_MAJOR_VERSION" ]; then
      mas upgrade
    fi
  fi

  xcode-select --install || true

  ###############################################################################
  # Homebrew                                                                    #
  ###############################################################################

  if ! hash brew 2>/dev/null; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi

  brewSafeUninstallFormula() {
    if brew list --formula "$@" 2>/dev/null; then
      brew uninstall --formula "$@"
    fi
  }

  brewSafeUninstallCask() {
    if brew list --cask "$@" 2>/dev/null; then
      brew uninstall --cask "$@"
    fi
  }

  # some uninstalls must be made before update
  set +e
  brew untap homebrew/homebrew-cask-drivers # for philips-hue-sync and luna-display
  brew untap aws/tap
  brew untap hpedrorodrigues/tools
  brew untap eth-p/software
  brew untap robotsandpencils/made
  brew untap charmbracelet/tap
  brew uninstall charmbracelet/tap/mods displayplacer curlie lazygit jira-cli freeze idb-companion
  if [[ -z "$KLA" ]]; then
    brew uninstall watchman
  fi
  brew untap ankitpokhrel/jira-cli charmbracelet/tap jakehilborn/jakehilborn jesseduffield/lazygit
  set -e

  brew cleanup
  brew update
  brew upgrade

  # is a separate upgrade for casks redundant?
  #brew upgrade --cask
  if [[ -z "$KLA" ]]; then
    #brew tap aws/tap               # for aws-sam-cli
    brew tap wix/brew # for applesimutils
    #brew tap robotsandpencils/made # for xcodes
  fi
  brew tap git-time-metric/gtm # for gtm
  # enables searching brew for commands not found, e.g. when. https://github.com/Homebrew/homebrew-command-not-found
  brew tap homebrew/command-not-found
  brew tap facebook/fb # for idb-companion for flipper
  #brew tap ankitpokhrel/jira-cli   # for jira-cli
  #brew tap jakehilborn/jakehilborn # for displayplacer
  brew tap kardolus/chatgpt-cli

  # not all computers need logitech drivers, also, these need sudo
  # brew install --cask homebrew/cask-drivers/logitech-gaming-software
  # brew install --cask homebrew/cask-drivers/logitech-options

  # remove brews here that were previously installed, to sync between machines
  for formula in ncdu chatgpt-cli bash-completion; do
    brewSafeUninstallFormula $formula
  done

  for cask in ui-browser keycombiner font-caskaydia-cove-nerd-font font-cascadia-code-pl keycue; do
    brewSafeUninstallCask $cask
  done

  stripCommentsAndWhitespace() {
    echo "$1" | sed '/^#/d' | sed 's/#.*//' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | sed '/^$/d' | tr '[:space:]' '\n' | xargs -n1 | sort -u
  }

  # this list no longer needs to be one per line, and can use comments
  if [[ -n "$KLA" ]]; then
    brews=$(cat "$SCRIPT_DIR/brew.k.ini")
  else
    brews=$(cat "$SCRIPT_DIR/brew.ini")
  fi
  apps_raw="${brews%%\[casks\]*}"
  casks_raw="${brews#*\[casks\]}"
  apps=$(stripCommentsAndWhitespace "$apps_raw")
  casks=$(stripCommentsAndWhitespace "$casks_raw")

  # note: yarn will install node, which you might want to remove, since it is handled by nvm
  alreadyInstalled=$(brew list --formula | sort -u)
  installTheseLines=$(comm -23 <(echo "$apps") <(echo "$alreadyInstalled"))
  installThese=${installTheseLines//$'\n'/ }
  echo "$installThese" | xargs brew install

  casks=$(stripCommentsAndWhitespace "$casks_raw")

  alreadyInstalled=$(brew list --cask | sort -u)
  installTheseLines=$(comm -23 <(echo "$casks") <(echo "$alreadyInstalled"))
  installThese=${installTheseLines//$'\n'/ }
  echo "$installThese" | xargs brew install --cask

  brew link --overwrite ugit
  # if you get "Chromium" is damaged and can't be opened. You should move it to the bin
  # https://www.reddit.com/r/MacOS/comments/q9d772/homebrew_chromium_is_damaged_and_cant_be_openend/
  if [ -f "/Applications/Chromium.app" ]; then
    xattr -cr /Applications/Chromium.app
  fi

  if [ -n "$X86_OR_ROSETTA" ]; then
    # TODO: when there are Apple Silicon versions of these packages, move the installation to the normal list
    brew install --cask yubico-yubikey-manager
  fi

  if [[ $PROCESSOR_ARCHITECTURE == 'arm' ]]; then

    if command -v az &>/dev/null; then
      az upgrade
      az extension add --name azure-devops # for git repos
    fi
    if [[ -n "$PROJ_ANTICIMEX" ]]; then
      #asdf global pnpm latest

      brew install microsoft-word

      #npm install -g vsts-npm-auth
      npm i -g better-vsts-npm-auth
    fi

    if [[ -n "$FIRSTVET" ]]; then
      gem install fastlane
      gem install cocoapods
    fi

  fi
  # arm part ends

  echo will cite | parallel --citation >/dev/null 2>&1

  # set up wemux user name
  if [ -f "$HOMEBREW_PREFIX"/etc/wemux.conf ]; then
    sed -i -- "s/host_list=(brew)/host_list=($USER)/" "$HOMEBREW_PREFIX"/etc/wemux.conf
    sed -i -- 's/# allow_server_change="true"/allow_server_change="true"/' "$HOMEBREW_PREFIX"/etc/wemux.conf
  fi

  if [ -d ~/.tmux/plugins ]; then
    for plugin in ~/.tmux/plugins/*; do
      set +e
      pushd "$plugin"
      git pull
      git submodule update --init --recursive
      popd
      set -e
    done
  fi

  # finish PIA installation
  # if you already have a manual installation, you will have to remove it with
  # rm -rf /Applications/Private\ Internet\ Access.app
  if [ ! -d /Applications/Private\ Internet\ Access.app ]; then
    RUNNER="$HOMEBREW_PREFIX/Caskroom/private-internet-access/v70/Private\ Internet\ Access\ Installer.app/Contents/MacOS/runner.sh"
    if [ -f "$RUNNER" ]; then
      "$RUNNER"
    fi
  fi

  # this is needed to suppress zsh message "compinit: insecure directories""
  chmod g-w "$HOMEBREW_PREFIX"/share ~/.zsh-personal-completions

fi ############################################################################
# configuration for both Mac and Linux
###############################################################################

# chatgpt history tracking
mkdir -p ~/.chatgpt-cli

## xplr plugins
mkdir -p ~/.config/xplr/plugins
pushd "$HOME"/.config/xplr/plugins
install_xplr_plugin() {
  if [ -d "$2" ]; then
    pushd "$2"
    git pull
    popd
  else
    git clone https://github.com/"$1"/"$2".xplr "$2"
  fi
}
install_xplr_plugin prncss-xyz icons
install_xplr_plugin sayanarijit map
install_xplr_plugin sayanarijit zoxide
install_xplr_plugin sayanarijit fzf
popd

## install rust
if ! command -v rustup &>/dev/null; then
  if [[ -n "$OS_RASPBIAN" ]]; then
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --no-modify-path --default-host arm-unknown-linux-gnueabihf -y
  else
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --no-modify-path -y
  fi
fi
if [ -x "$(command -v rustup)" ]; then
  rustup update
fi
if [ -x "$(command -v cargo)" ] && version_gte "$(cargo --version | cut -d " " -f2)" 1.0.0; then
  cargo install --verbose cargo-update || true
  cargo install --verbose termimage || true # tiv is better, but this works on raspberry pi, where tiv does not
  cargo install --verbose cyme || true
  cargo install --verbose lscolors || true # pipe filenames into this to get coloring
  cargo install --verbose --git https://github.com/jez/as-tree || true
  if ! [ -x "$(command -v atuin)" ]; then
    cargo install --verbose atuin || true
  fi
  # yazi should have been installed by brew on macOS
  if ! [ -x "$(command -v yazi)" ]; then
    cargo install --locked --verbose yazi-fm || true
  fi
  # not working anymore?
  if [ -f ~/.cargo/bin/cargo-install-update ]; then
    set +e
    # for most, try to get latest dependencies
    cargo install-update -a
    # yazi needs locked, i.e. not latest https://github.com/sxyazi/yazi/issues/801
    CARGO_INSTALL_OPTS=--locked cargo install-update -a
    set -e
  fi
  if [ -f ~/.cargo/bin/cargo-install-update-config ]; then
    mv ~/.cargo/bin/cargo-install-update-config ~/.cargo/bin/cargo-install-update-configure
  fi
fi

# yazi theme
if [ -d ~/.config/yazi ]; then
  wget -qNP ~/.config/yazi https://raw.githubusercontent.com/dracula/sublime/master/Dracula.tmTheme
fi

# repair cheat completion
HOMEBREW_SITE_FUNCTIONS="$HOMEBREW_PREFIX"/share/zsh/site-functions
if [ -f "$HOMEBREW_SITE_FUNCTIONS"/cheat.zsh ] && ! [ -f "$HOMEBREW_SITE_FUNCTIONS"/_cheat ]; then
  pushd "$HOMEBREW_SITE_FUNCTIONS"
  ln -s cheat.zsh _cheat
  popd
fi

# this seems healthy to do every now and then to make sure zsh completion works
trash ~/.zcompdump* ~/.zcompcache 2>/tmp/zcomp_delete_error.txt || true

# atuin completion
if [ -n "$GENCOMPL_FPATH" ] && [[ -x "$(command -v atuin)" ]]; then
  mkdir -p "$GENCOMPL_FPATH"
  atuin gen-completions --shell zsh --out-dir "$GENCOMPL_FPATH"
fi

# azure-cli completion
if command -v az &>/dev/null; then
  wget -qNP ~/.zsh-personal-functions https://raw.githubusercontent.com/Azure/azure-cli/dev/az.completion
fi

# vim
mkdir -p ~/.vim/autoload
wget --show-progress -qNP ~/.vim/autoload https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

# the following fix is no longer needed since macOS 14 ships with ncurses 6.2
# add tmux-256color terminfo to ~/.terminfo
#curl -L https://invisible-island.net/datafiles/current/terminfo.src.gz >/tmp/terminfo.src.gz
#gunzip -f /tmp/terminfo.src.gz
#/usr/bin/tic -xe tmux-256color /tmp/terminfo.src
if [ -d ~/.terminfo ]; then
  trash ~/.terminfo
fi

curl -o ~/.local/bin/ssh-find-agent.sh -L https://raw.githubusercontent.com/wwalker/ssh-find-agent/master/ssh-find-agent.sh
chmod +x ~/.local/bin/ssh-find-agent.sh

if [ -x "$(command -v gh)" ]; then
  if ! gh auth status; then
    gh auth login -p ssh -h github.com -w || true
  fi
fi

# fonts: Delugia still useful for iTerm2, but redundant for VSCode
if [[ $(uname) == 'Darwin' || -n $UBUNTU_DESKTOP ]]; then
  if [[ $(uname) == 'Darwin' ]]; then
    FONT_DIRECTORY=~/Library/Fonts
  else
    mkdir -p ~/.local/share/fonts
    FONT_DIRECTORY=~/.local/share/fonts
  fi

  gh release download -R adam7/delugia-code -p delugia-book.zip --skip-existing -D "$TMPDIR"
  yes | unzip -u "$TMPDIR"delugia-book.zip -d $FONT_DIRECTORY
fi

if [ -x "$(command -v zsh)" ]; then
  zsh -ic "zinit self-update; zinit update --all; zinit cclear"
fi

# set up alternate gitconfig file used to determine local settings
yadm alt

# this doesn't work for some reason
#yadm config core.fsmonitor false

# make a persistent temp directory
mkdir -p ~/temp

if ! [ "$CODE_DIR" ]; then
  # supress Spotlight indexing of code folder, no longer working?
  mkdir -p "$CODE_DIR"
  touch "$CODE_DIR"/.metadata_never_index
  mkdir -p "$CODE_DIR"/private
  mkdir -p "$CODE_DIR"/experiments
fi

if [ -z "$DOTFILES_LITE" ]; then
  if [ -x "$(command -v tldr)" ]; then
    # this has stopped working? "Could Not Rename"
    set +e
    tldr --update
    set -e
  fi
fi

if [[ -x "$(command -v cheat)" ]] && [ ! -d ~/.config/cheat/cheatsheets ]; then
  git clone https://github.com/cheat/cheatsheets.git ~/.config/cheat/cheatsheets/community
fi

if [[ -x "$(command -v atuin)" ]]; then
  # you have to register atuin once and import _once_
  atuin sync || (if atuin login -u Mellbourn | grep "You are already logged in! Please run 'atuin logout' if you wish to login again"; then
    atuin logout
    atuin login -u Mellbourn
  fi && atuin import auto)
fi

###############################################################################
# development
###############################################################################

docker system prune -f 2>>/tmp/docker_system_prune.err.txt || true

function zsh_performance_measurements() {
  ~/.local/bin/mezsh -m 5
}

############################################################################
# configuration for just Linux
###############################################################################
if [[ $(uname) == 'Linux' ]]; then
  # unclear if this is needed, maybe bootstrap-sudo handles this
  #if [[ -x "$(command -v zsh)" ]] && ! grep -q "$USER:.*zsh" /etc/passwd; then
  #  chsh -s "$(which zsh)" "$(whoami)"
  #fi

  # do some cleanup
  if [ -x "$(command -v trash-empty)" ]; then
    # problem: -f parameter necessary on WSL, but not supported on raspberrypi
    yes | trash-empty 30
  fi
  # unfortunately trash-empty 0.12 does not clean NTFS mounted file systems
  ~/.local/bin/trash-empty-wsl +30

  zsh_performance_measurements
  exit 0
fi ############################################################################
# mac specific configurations
###############################################################################

if ! [ -f ~/.fzf."$SHELLNAME" ]; then
  "$HOMEBREW_PREFIX"/opt/fzf/install --key-bindings --completion --no-update-rc
fi

###############################################################################
# development
###############################################################################
set +e
gh extension install dlvhdr/gh-dash
gh extension install gennaro-tedesco/gh-f
gh extension install meiji163/gh-notify
gh extension install github/gh-copilot
set -e
gh extension upgrade --all

npm i -g zx
npm i -g tsx
# @swc/core needed for _debugging_ ts-node, but not for running it
if [[ -z "$KLA" ]]; then
  npm i -g ts-node @swc/core
fi
# cleanup-branches no longer installable
#npm i -g cleanup-branches

npm update -g
# save some disk
xcrun simctl delete unavailable || true

###############################################################################
# Associate filetypes to apps that should open them                           #
###############################################################################
# open in Visual Studio Code
#duti -s com.microsoft.VSCode .js all           # javascript - extensions work too
#duti -s com.microsoft.VSCode .ts all           # typescript
duti -s com.microsoft.VSCode .md all           # markdown
duti -s com.microsoft.VSCode com.apple.log all # .log
duti -s com.microsoft.VSCode public.json all
duti -s com.microsoft.VSCode public.plain-text all # text files
duti -s com.microsoft.VSCode public.text all       # does this have a real effect?
duti -s com.microsoft.VSCode public.xml all
duti -s com.microsoft.VSCode public.yaml all
# seems to have no effecxt: public.data, .lock
# open in chrome
#duti -s com.google.chrome public.svg-image all # .svg
# prefer vlc over quicktime
duti -s org.videolan.vlc .avi Viewer

###############################################################################
# Finder                                                                      #
###############################################################################
# show hidden files
defaults write com.apple.finder AppleShowAllFiles -bool true
# Show all filename extensions
defaults write NSGlobalDomain AppleShowAllExtensions -bool true
# Finder: show status bar
defaults write com.apple.finder ShowStatusBar -bool true
# Show Path bar in Finder
defaults write com.apple.finder ShowPathbar -bool true
# Use list view in all Finder windows by default (won't affect folders where there is already a DS_Store)
defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"
# When performing a search, search the current folder by default
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"
# hide all icons on from desktop
defaults write com.apple.finder CreateDesktop -bool false
# Remove items from the Trash after 30 days
defaults write com.apple.finder FXRemoveOldTrashItems -bool true
# Display full POSIX path as Finder window title
defaults write com.apple.finder _FXShowPosixPathInTitle -bool true
# Disable the warning when changing a file extension
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
# show "Quit" menu item for finder
defaults write com.apple.finder QuitMenuItem -bool true

###############################################################################
# Sound                                                                       #
###############################################################################
# Play feedback when volume is changed
defaults write -g com.apple.sound.beep.feedback -int 1
# Change the alert beep sound
if [ -f /System/Library/Sounds/Pop.aiff ]; then
  defaults write .GlobalPreferences com.apple.sound.beep.sound /System/Library/Sounds/Pop.aiff
fi

###############################################################################
# Performance                                                                 #
###############################################################################
# reduce transparency to make WindowServer take less CPU, but looks like shit
#defaults write com.apple.universalaccess reduceTransparency 1

###############################################################################
# Non-apple settings                                                          #
###############################################################################
defaults write com.manytricks.Moom "All Hot Keys Are Local" -bool YES
###############################################################################
# Miscellaneous                                                               #
###############################################################################
# Save screenshots to Pictures
defaults write com.apple.screencapture location "${HOME}/Pictures"

# reopen previous windows when starting an app
defaults write NSGlobalDomain NSQuitAlwaysKeepsWindows -bool true

# don't restore images in preview
defaults write com.apple.Preview NSQuitAlwaysKeepsWindows -bool false

# Expand save panel by default
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

# Make animated dialog boxes, like the save, appear faster (0.2 is default)
# did this make dialogs appear slower?
#defaults write NSGlobalDomain NSWindowResizeTime .05

# Expand print panel by default - these don't work anymore? (but expanded state is preserved between restarts)
#defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
#defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

# show battery percent
defaults write com.apple.menuextra.battery ShowPercent YES

# make clock show only time, so it can be clickable in Big Sur (to show notification center)
defaults write com.apple.menuextra.clock DateFormat -string "HH:mm"

# set TextEdit default format to plain text
defaults write com.apple.TextEdit RichText -int 0

# smoother font on low DPI https://code.visualstudio.com/updates/v1_28#_blurriness-on-macos-mojave
# Apple doesn't intend to support this option https://intellij-support.jetbrains.com/hc/en-us/articles/360016827360-Reporting-font-rendering-problems
#defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO
defaults delete CGFontRenderingFontSmoothingDisabled || true

# set screen saver to activate after 20min instead of 5min
defaults -currentHost write com.apple.screensaver idleTime 1200

###############################################################################
# Mouse & Trackpad                                                            #
###############################################################################
# show in menu bar - these files no longer present in Big Sur
#defaults write com.apple.systemuiserver menuExtras -array "/System/Library/CoreServices/Menu Extras/Bluetooth.menu" "/System/Library/CoreServices/Menu Extras/Volume.menu"
# increase trackpad tracking speed - works!
defaults write -g com.apple.trackpad.scaling -float 3.0
# increase mouse tracking speed, 3.0 normal max but magic mouse is slow
defaults write -g com.apple.mouse.scaling -float 5.0
# Trackpad: enable tap to click for this user and for the login screen - don't work!
#defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
#defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
#defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
defaults write com.apple.driver.AppleBluetoothMultitouch.mouse MouseButtonMode TwoButton
# Smart zoom enabled, double-tap with one finger
defaults write com.apple.driver.AppleBluetoothMultitouch.mouse MouseOneFingerDoubleTapGesture -int 1
# Double-tap with two fingers to Mission Control (set to 0 to disable) (already default?)
defaults write com.apple.driver.AppleBluetoothMultitouch.mouse MouseTwoFingerDoubleTapGesture -int 3
# Two finger horizontal swipe
# 0 = Swipe between pages with one finger
# 1 = Swipe between pages
# 2 = Swipe between full screen apps with two fingers, swipe between pages with one finger (already default?)
defaults write com.apple.driver.AppleBluetoothMultitouch.mouse MouseTwoFingerHorizSwipeGesture -int 2

###############################################################################
# Calendar                                                                    #
###############################################################################
# Show week numbers (10.8 only)
defaults write com.apple.iCal "Show Week Numbers" -bool true
# disable Show invitation messages in Notification Center
defaults write com.apple.iCal InvitationNotificationsDisabled -int 1
# disable Time to Leave alert - this seems unnecessary to disable
#defaults write com.apple.iCal TimeToLeaveEnabled  -int 0

###############################################################################
# Keyboard                                                                    #
###############################################################################
# THESE SEEM DANGEROUS, NOT CONSISTENT, destroys key repeat in Chrome?
# Set a blazingly fast keyboard repeat rate
defaults write NSGlobalDomain KeyRepeat -int 1
defaults write NSGlobalDomain InitialKeyRepeat -int 25

# Disable smart quotes as they’re annoying when typing code
defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

# Disable smart dashes as they’re annoying when typing code
defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

# Use all F1, F2, etc keys as standard function keys
defaults write -g com.apple.keyboard.fnState -bool true

###############################################################################
# Keyboard shortcuts                                                          #
###############################################################################
# local keyboard shortucts

# repair full screen for chrome beta
#defaults write com.google.Chrome.beta NSUserKeyEquivalents -dict-add "Enter Full Screen" "@^f"
# undo the setting, do
# defaults delete com.google.Chrome.beta NSUserKeyEquivalents

# this didn't work anyway
#defaults write com.electron.react-native-debugger NSUserKeyEquivalents -dict-add "Enter Full Screen" "@^f"

# global keyboard shortcuts fixed

#defaults write -globalDomain NSUserKeyEquivalents -dict-add "Enter Full Screen" "@^f"
#defaults write -globalDomain NSUserKeyEquivalents -dict-add "Zoom In" "@+"
# couldn't get @< to parse
#defaults write -globalDomain NSUserKeyEquivalents -dict-add "Move focus to next window" '@\\<'

# to undo the setting
#defaults delete -globalDomain NSUserKeyEquivalents

###############################################################################
# Dock                                                                        #
###############################################################################
# show more recent apps than three
defaults write com.apple.dock show-recents -bool true
defaults write com.apple.dock show-recent-count -int 12
# arrange the icons
set +e
declare -a apps_to_remove=("Mail" "Safari" "Maps" "Photos" "FaceTime" "Calendar" "Contacts" "Reminders" "Notes" "TV" "Music" "Podcasts" "Keynote" "Numbers" "Pages" "App Store" "Messages" "Epson Photo+" "Epson Photo+ Tool" "Feedback Assistant" "Freeform")
for app_to_remove in "${apps_to_remove[@]}"; do
  dockutil --remove "$app_to_remove" --no-restart
done
if [ -f "/Applications/Google Chrome Beta.app" ]; then
  dockutil --add "/Applications/Google Chrome Beta.app" --after "Launchpad" --no-restart
  dockutil --add "/Applications/iTerm.app" --after "Google Chrome Beta" --no-restart
fi
if [ -f "/Applications/Google Chrome.app" ]; then
  dockutil --add "/Applications/Google Chrome.app" --after "Launchpad" --no-restart
  dockutil --add "/Applications/iTerm.app" --after "Google Chrome" --no-restart
fi
dockutil --add "/Applications/Visual Studio Code.app" --after "iTerm" --no-restart
dockutil --add "/Applications/Bitwarden.app" --after "Visual Studio Code"
set -e

# autohide dock - my screen realestate is valuable!
defaults write com.apple.dock autohide -bool true
# Set the icon size of Dock items to 24 pixels
defaults write com.apple.dock tilesize -int 24
# Make Dock icons of hidden applications translucent
defaults write com.apple.dock showhidden -bool true
# don't rearrange full screen apps based on most recent use ("Automatically rearrange Spaces based on most recent use")
defaults write com.apple.dock mru-spaces -int 0

###############################################################################
# Safari & WebKit                                                             #
###############################################################################
# Show status bar
defaults write com.apple.Safari ShowStatusBar -bool true
defaults write com.apple.Safari ShowOverlayStatusBar -bool true
# Show the full URL in the address bar (note: this still hides the scheme)
defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true
# Safari opens with: last session
defaults write com.apple.Safari AlwaysRestoreSessionAtLaunch -bool true
# Enable the Develop menu and the Web Inspector in Safari
defaults write com.apple.Safari IncludeDevelopMenu -bool true
# Enable Safari’s debug menu
defaults write com.apple.Safari IncludeInternalDebugMenu -bool true
# Update extensions automatically, does this still do anything?
defaults write com.apple.Safari InstallExtensionUpdatesAutomatically -bool true
# Make Safari’s search banners default to Contains instead of Starts With
defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false
# Allow website tracking by disabling prevent cross-site tracking
defaults write com.apple.Safari BlockStoragePolicy -int 1
# Website use of location services, does this still do anything?
# 0 = Deny without prompting
# 1 = Prompt for each website once each day
# 2 = Prompt for each website one time only
defaults write com.apple.Safari SafariGeolocationPermissionPolicy -int 2

# run customer specific bootstrap
"${XDG_CONFIG_HOME:-$HOME/.config}"/yadm/bootstrap-customer

# this script makes brew doctor fail
if [ -f "$HOMEBREW_PREFIX"/Library/Taps/wix/homebrew-brew/applesimutils.rb ]; then
  trash "$HOMEBREW_PREFIX"/Library/Taps/wix/homebrew-brew/applesimutils.rb
fi
# brew doctor fails with Unexpected dylibs:  /usr/local/lib/libDellMonitorSdkLib.dylib
set +e
brew doctor
set -e
zsh_performance_measurements
