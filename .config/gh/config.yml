# What protocol to use when performing git operations. Supported values: ssh, https
git_protocol: ssh
# What editor gh should run when creating issues, pull requests, etc. If blank, will refer to environment.
editor:
# When to interactively prompt. This is a global config that cannot be overridden by hostname. Supported values: enabled, disabled
prompt: enabled
# A pager program to send command output to, e.g. "less". Set the value to "cat" to disable the pager.
pager: less
# Aliases allow you to create nicknames for gh commands
aliases:
  cw: pr checks --watch # rw probably better
  cwm: "!gh cws && gh pr merge --merge --auto"
  cws: "!sleep 10 && gh cw"
  co: pr checkout
  open: "!gh browse . -b $(git rev-parse --abbrev-ref HEAD)"
  issueMoveToInProgress: '!gh project item-edit --id $(gh project item-list --owner dmazeio 1 --limit 500 --format json --jq ".items[]| select(.content.number == $1) | .id") --field-id PVTSSF_lADOCQnWF84AYeyPzgPpt6k --project-id PVT_kwDOCQnWF84AYeyP --single-select-option-id 065c1207'
  issueMoveToInTesting: '!gh issue reopen -c "should be tested" $1 || gh project item-edit --id $(gh project item-list --owner dmazeio 1 --limit 500 --format json --jq ".items[]| select(.content.number == $1) | .id") --field-id PVTSSF_lADOCQnWF84AYeyPzgPpt6k --project-id PVT_kwDOCQnWF84AYeyP --single-select-option-id a1e7acd6'
  work: "!gh status -o $GITHUB_ORGANIZATION"
  members: "!gh api /orgs/$GITHUB_ORGANIZATION/members -q .[].login"
  whoami: "!gh api user | jq -r .login"
  runs: "!gh run list -u $(gh whoami) --limit 5"
  runb: "!gh run list -u $(gh whoami) --limit 5 -b $(git rev-parse --abbrev-ref HEAD)"
  rw: '!databaseId="$(gh run list -u $(gh whoami) -L 1 --json databaseId -q .[0].databaseId)"; gh run watch --exit-status $databaseId && result=Success || result=Fail; terminal-notifier -message $result -sound "$([ $result = "Success" ] && echo Glass || echo Frog)" -ignoreDnD -title "$([ $result = "Success" ] && echo üçÄ || echo üë∫)" -contentImage https://www.svgrepo.com/show/353783/github-octocat.svg -open "$(gh run view --json url -q .url $databaseId)"'
  failw: "!gh pr checks | grep fail | choose -1 | xargs open"
  fail: "!gh run view --log-failed $(gh run list -u $(gh whoami) --limit 1 --json databaseId -q .[0].databaseId) | less +G"
  prs: pr status --conflict-status
  prv: pr view -w
  pru: "!gh pr view --json url -q .url|pbcopy"
  repou: "!gh repo view --json url -q .url|pbcopy"
  review: search prs --review-requested=@me --state=open -w
  latest: "!gh api graphql -f query=' query { viewer { repositories(first: 20, orderBy: {field: PUSHED_AT, direction: DESC}) { nodes { name url pushedAt } } } }' | jq -r '.data.viewer.repositories.nodes[].url' "
# The path to a unix socket through which send HTTP connections. If blank, HTTP traffic will be handled by net/http.DefaultTransport.
http_unix_socket:
# What web browser gh should use when opening URLs. If blank, will refer to environment.
browser:
version: "1"
