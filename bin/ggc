#!/bin/bash

# Check for required arguments
if [ "$#" -lt 3 ]; then
    echo "Usage: $0 [-v] <repo_path> <timestamp_file> <time_in_days>"
    exit 1
fi

# Handle the verbose flag
VERBOSE=false
if [ "$1" == "-v" ]; then
    VERBOSE=true
    shift 1 # Remove the verbose flag from arguments
fi

# Read command-line arguments
REPO_PATH="$1"
TIMESTAMP_FILE="$2"
TIME_IN_DAYS="$3"

# Convert time from days to seconds
TIME_IN_SECONDS=$((TIME_IN_DAYS * 24 * 60 * 60))

# Function for conditional echo
log_message() {
    if [ "$VERBOSE" = true ]; then
        echo "$1"
    fi
}

# Ensure the directory for the timestamp file exists
TIMESTAMP_DIR=$(dirname "$TIMESTAMP_FILE")
if [ ! -d "$TIMESTAMP_DIR" ]; then
    log_message "Timestamp directory does not exist. Creating: $TIMESTAMP_DIR"
    mkdir -p "$TIMESTAMP_DIR" || {
        echo "Failed to create directory: $TIMESTAMP_DIR"
        exit 1
    }
fi

# Navigate to the repository
if ! cd "$REPO_PATH"; then
    echo "Error: Could not change directory to '$REPO_PATH'. Please provide a valid Git repository path."
    exit 1
fi

# Check if the timestamp file exists
if [ -f "$TIMESTAMP_FILE" ]; then
    # Get the last run time
    LAST_RUN=$(cat "$TIMESTAMP_FILE")
    CURRENT_TIME=$(date +%s)

    # Calculate the time difference
    TIME_DIFF=$((CURRENT_TIME - LAST_RUN))

    if ((TIME_DIFF > TIME_IN_SECONDS)); then
        # Run aggressive garbage collection
        log_message "Running 'git gc --aggressive'..."
        git gc --aggressive
        # Update the timestamp file
        date +%s >"$TIMESTAMP_FILE"
    else
        # Run automatic garbage collection
        log_message "Running 'git gc --auto'..."
        git gc --auto
    fi
else
    # If the timestamp file does not exist, run aggressive garbage collection
    log_message "No timestamp found. Running 'git gc --aggressive'..."
    git gc --aggressive
    # Create the timestamp file
    date +%s >"$TIMESTAMP_FILE"
fi
